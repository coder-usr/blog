(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{583:function(s,t,a){"use strict";a.r(t);var e=a(15),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h3",{attrs:{id:"cookies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookies"}},[s._v("#")]),s._v(" cookies:")]),s._v(" "),a("p",[s._v("大小有限制4k（20个），客户端存储，只能存字符串, 可以区分路径参数（不同网页可以设置不可见）")]),s._v(" "),a("h3",{attrs:{id:"session"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#session"}},[s._v("#")]),s._v(" session:")]),s._v(" "),a("p",[s._v("服务器存储，保存为对象，没有路径区分（所有页面共享）\n至于localstorage和session差不多，就只有那么两个区别 ：\na.是不但共享页面还共享浏览器窗口\nb.有效期不同 local是永久有效 session是浏览器窗口关闭以前有效")]),s._v(" "),a("h3",{attrs:{id:"渲染过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渲染过程"}},[s._v("#")]),s._v(" 渲染过程：")]),s._v(" "),a("p",[s._v("1.解析HTML构建DOM树\n2.解析CSS构建CSSOM\n3.DOM树和CSSOM结合形成Render树\n4.布局Render树，负责元素的尺寸和位置（回流）\n5.绘制Render树（重绘）\n6.将各层信息发送给GPU进程，GPU将各层合成，显示在页面上\n7.元素的位置和尺寸的改变会引起回流和重绘，元素样式改变会引起重绘，影响浏览器性能。\n8.因为GPU是专门为处理图形而设计，所以它在速度和能耗上更有效率。\n通过GPU硬件加速的方式（transform、opacity、filters），声明一个新的复合图层，它会单独分配资源，这样就不会影响默认复合图层(标准文档流以及position为absolute，fixed都属于默认复合层)，从而避免重绘与回流。\n注意:如果a是一个复合图层，而且b在a上面，那么b也会被隐式转为一个复合图层\n在GPU渲染字体会导致抗锯齿无效。这是因为GPU和CPU的算法不同。因此如果你不在动画结束的时候关闭硬件加速，会产生字体模糊。")]),s._v(" "),a("h3",{attrs:{id:"url"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#url"}},[s._v("#")]),s._v(" url：")]),s._v(" "),a("p",[s._v("记录该文件地址、信息与浏览器如何处理该文件")])])}),[],!1,null,null,null);t.default=n.exports}}]);